{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport const getDateSectionConfigFromFormatToken = (utils, formatToken) => {\n  const config = utils.formatTokenMap[formatToken];\n  if (config == null) {\n    throw new Error([`MUI: The token \"${formatToken}\" is not supported by the Date and Time Pickers.`, 'Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported.'].join('\\n'));\n  }\n  if (typeof config === 'string') {\n    return {\n      type: config,\n      contentType: config === 'meridiem' ? 'letter' : 'digit'\n    };\n  }\n  return {\n    type: config.sectionType,\n    contentType: config.contentType\n  };\n};\nconst getDeltaFromKeyCode = keyCode => {\n  switch (keyCode) {\n    case 'ArrowUp':\n      return 1;\n    case 'ArrowDown':\n      return -1;\n    case 'PageUp':\n      return 5;\n    case 'PageDown':\n      return -5;\n    default:\n      return 0;\n  }\n};\nexport const getDaysInWeekStr = (utils, format) => {\n  const elements = [];\n  const now = utils.date();\n  const startDate = utils.startOfWeek(now);\n  const endDate = utils.endOfWeek(now);\n  let current = startDate;\n  while (utils.isBefore(current, endDate)) {\n    elements.push(current);\n    current = utils.addDays(current, 1);\n  }\n  return elements.map(weekDay => utils.formatByString(weekDay, format));\n};\nexport const getLetterEditingOptions = (utils, sectionType, format) => {\n  switch (sectionType) {\n    case 'month':\n      {\n        return utils.getMonthArray(utils.date()).map(month => utils.formatByString(month, format));\n      }\n    case 'weekDay':\n      {\n        return getDaysInWeekStr(utils, format);\n      }\n    case 'meridiem':\n      {\n        const now = utils.date();\n        return [utils.startOfDay(now), utils.endOfDay(now)].map(date => utils.formatByString(date, format));\n      }\n    default:\n      {\n        return [];\n      }\n  }\n};\nexport const cleanDigitSectionValue = (utils, value, sectionType, format, hasLeadingZeros, sectionBoundaries) => {\n  const hasLetter = () => {\n    const startOfYear = utils.startOfYear(utils.date());\n    const startOfYearStr = utils.formatByString(startOfYear, format);\n    return Number.isNaN(Number(startOfYearStr));\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    if (sectionType !== 'day' && hasLetter()) {\n      throw new Error([`MUI: The token \"${format}\" is a digit format with letter in it.'\n             This type of format is only supported for 'day' sections`].join('\\n'));\n    }\n  }\n  if (sectionType === 'day' && hasLetter()) {\n    const date = utils.setDate(sectionBoundaries.longestMonth, value);\n    return utils.formatByString(date, format);\n  }\n\n  // queryValue without leading `0` (`01` => `1`)\n  const valueStr = value.toString();\n  if (hasLeadingZeros) {\n    const size = utils.formatByString(utils.date(), format).length;\n    let cleanValueStr = valueStr;\n\n    // Remove the leading zeros\n    cleanValueStr = Number(cleanValueStr).toString();\n\n    // Add enough leading zeros to fill the section\n    while (cleanValueStr.length < size) {\n      cleanValueStr = `0${cleanValueStr}`;\n    }\n    return cleanValueStr;\n  }\n  return valueStr;\n};\nexport const adjustSectionValue = (utils, section, keyCode, sectionsValueBoundaries, activeDate) => {\n  const delta = getDeltaFromKeyCode(keyCode);\n  const isStart = keyCode === 'Home';\n  const isEnd = keyCode === 'End';\n  const shouldSetAbsolute = section.value === '' || isStart || isEnd;\n  const adjustDigitSection = () => {\n    const sectionBoundaries = sectionsValueBoundaries[section.type]({\n      currentDate: activeDate,\n      format: section.format,\n      contentType: section.contentType\n    });\n    const getCleanValue = value => cleanDigitSectionValue(utils, value, section.type, section.format, section.hasLeadingZeros, sectionBoundaries);\n    if (shouldSetAbsolute) {\n      if (section.type === 'year' && !isEnd && !isStart) {\n        return utils.formatByString(utils.date(), section.format);\n      }\n      if (delta > 0 || isStart) {\n        return getCleanValue(sectionBoundaries.minimum);\n      }\n      return getCleanValue(sectionBoundaries.maximum);\n    }\n    const currentSectionValue = parseInt(section.value, 10);\n    const newSectionValueNumber = currentSectionValue + delta;\n    if (newSectionValueNumber > sectionBoundaries.maximum) {\n      return getCleanValue(sectionBoundaries.minimum);\n    }\n    if (newSectionValueNumber < sectionBoundaries.minimum) {\n      return getCleanValue(sectionBoundaries.maximum);\n    }\n    return getCleanValue(newSectionValueNumber);\n  };\n  const adjustLetterSection = () => {\n    const options = getLetterEditingOptions(utils, section.type, section.format);\n    if (options.length === 0) {\n      return section.value;\n    }\n    if (shouldSetAbsolute) {\n      if (delta > 0 || isStart) {\n        return options[0];\n      }\n      return options[options.length - 1];\n    }\n    const currentOptionIndex = options.indexOf(section.value);\n    const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;\n    return options[newOptionIndex];\n  };\n  if (section.contentType === 'digit') {\n    return adjustDigitSection();\n  }\n  return adjustLetterSection();\n};\nexport const getSectionVisibleValue = (section, target) => {\n  let value = section.value || section.placeholder;\n\n  // In the input, we add an empty character at the end of each section without leading zeros.\n  // This makes sure that `onChange` will always be fired.\n  // Otherwise, when your input value equals `1/dd/yyyy` (format `M/DD/YYYY` on DayJs),\n  // If you press `1`, on the first section, the new value is also `1/dd/yyyy`,\n  // So the browser will not fire the input `onChange`.\n  const shouldAddInvisibleSpace = ['input-rtl', 'input-ltr'].includes(target) && section.contentType === 'digit' && !section.hasLeadingZeros && value.length === 1;\n  if (shouldAddInvisibleSpace) {\n    value = `${value}\\u200e`;\n  }\n  if (target === 'input-rtl') {\n    value = `\\u2068${value}\\u2069`;\n  }\n  return value;\n};\nexport const cleanString = dirtyString => dirtyString.replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '');\nexport const addPositionPropertiesToSections = (sections, isRTL) => {\n  let position = 0;\n  let positionInInput = isRTL ? 1 : 0;\n  const newSections = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const renderedValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');\n    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;\n    const sectionLength = cleanString(sectionStr).length;\n    const sectionLengthInInput = sectionStr.length;\n\n    // The ...InInput values consider the unicode characters but do include them in their indexes\n    const cleanedValue = cleanString(renderedValue);\n    const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;\n    const endInInput = startInInput + cleanedValue.length;\n    newSections.push(_extends({}, section, {\n      start: position,\n      end: position + sectionLength,\n      startInInput,\n      endInInput\n    }));\n    position += sectionLength;\n    // Move position to the end of string associated to the current section\n    positionInInput += sectionLengthInInput;\n  }\n  return newSections;\n};\nconst getSectionPlaceholder = (utils, localeText, sectionConfig, currentTokenValue) => {\n  switch (sectionConfig.type) {\n    case 'year':\n      {\n        return localeText.fieldYearPlaceholder({\n          digitAmount: utils.formatByString(utils.date(), currentTokenValue).length\n        });\n      }\n    case 'month':\n      {\n        return localeText.fieldMonthPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'day':\n      {\n        return localeText.fieldDayPlaceholder();\n      }\n    case 'weekDay':\n      {\n        return localeText.fieldWeekDayPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'hours':\n      {\n        return localeText.fieldHoursPlaceholder();\n      }\n    case 'minutes':\n      {\n        return localeText.fieldMinutesPlaceholder();\n      }\n    case 'seconds':\n      {\n        return localeText.fieldSecondsPlaceholder();\n      }\n    case 'meridiem':\n      {\n        return localeText.fieldMeridiemPlaceholder();\n      }\n    default:\n      {\n        return currentTokenValue;\n      }\n  }\n};\nexport const changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === 'weekDay') {\n      throw new Error(\"changeSectionValueFormat doesn't support week day formats\");\n    }\n  }\n  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);\n};\nconst isFourDigitYearFormat = (utils, format) => utils.formatByString(utils.date(), format).length === 4;\nexport const doesSectionHaveLeadingZeros = (utils, contentType, sectionType, format) => {\n  if (contentType !== 'digit') {\n    return false;\n  }\n  switch (sectionType) {\n    // We can't use `changeSectionValueFormat`, because  `utils.parse('1', 'YYYY')` returns `1971` instead of `1`.\n    case 'year':\n      {\n        if (isFourDigitYearFormat(utils, format)) {\n          const formatted0001 = utils.formatByString(utils.setYear(utils.date(), 1), format);\n          return formatted0001 === '0001';\n        }\n        const formatted2001 = utils.formatByString(utils.setYear(utils.date(), 2001), format);\n        return formatted2001 === '01';\n      }\n    case 'month':\n      {\n        return utils.formatByString(utils.startOfYear(utils.date()), format).length > 1;\n      }\n    case 'day':\n      {\n        return utils.formatByString(utils.startOfMonth(utils.date()), format).length > 1;\n      }\n    case 'weekDay':\n      {\n        return utils.formatByString(utils.startOfWeek(utils.date()), format).length > 1;\n      }\n    case 'hours':\n      {\n        return utils.formatByString(utils.setHours(utils.date(), 1), format).length > 1;\n      }\n    case 'minutes':\n      {\n        return utils.formatByString(utils.setMinutes(utils.date(), 1), format).length > 1;\n      }\n    case 'seconds':\n      {\n        return utils.formatByString(utils.setMinutes(utils.date(), 1), format).length > 1;\n      }\n    default:\n      {\n        throw new Error('Invalid section type');\n      }\n  }\n};\nconst getEscapedPartsFromFormat = (utils, format) => {\n  const escapedParts = [];\n  const {\n    start: startChar,\n    end: endChar\n  } = utils.escapedCharacters;\n  const regExp = new RegExp(`(\\\\${startChar}[^\\\\${endChar}]*\\\\${endChar})+`, 'g');\n  let match = null;\n  // eslint-disable-next-line no-cond-assign\n  while (match = regExp.exec(format)) {\n    escapedParts.push({\n      start: match.index,\n      end: regExp.lastIndex - 1\n    });\n  }\n  return escapedParts;\n};\nexport const splitFormatIntoSections = (utils, localeText, format, date) => {\n  let startSeparator = '';\n  const sections = [];\n  const commitToken = token => {\n    if (token === '') {\n      return null;\n    }\n    const sectionConfig = getDateSectionConfigFromFormatToken(utils, token);\n    const sectionValue = date == null || !utils.isValid(date) ? '' : utils.formatByString(date, token);\n    const hasLeadingZeros = doesSectionHaveLeadingZeros(utils, sectionConfig.contentType, sectionConfig.type, token);\n    sections.push(_extends({}, sectionConfig, {\n      format: token,\n      value: sectionValue,\n      placeholder: getSectionPlaceholder(utils, localeText, sectionConfig, token),\n      hasLeadingZeros,\n      startSeparator: sections.length === 0 ? startSeparator : '',\n      endSeparator: '',\n      modified: false\n    }));\n    return null;\n  };\n\n  // Expand the provided format\n  let formatExpansionOverflow = 10;\n  let prevFormat = format;\n  let nextFormat = utils.expandFormat(format);\n  while (nextFormat !== prevFormat) {\n    prevFormat = nextFormat;\n    nextFormat = utils.expandFormat(prevFormat);\n    formatExpansionOverflow -= 1;\n    if (formatExpansionOverflow < 0) {\n      throw new Error('MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component');\n    }\n  }\n  const expandedFormat = nextFormat;\n\n  // Get start/end indexes of escaped sections\n  const escapedParts = getEscapedPartsFromFormat(utils, expandedFormat);\n\n  // This RegExp test if the beginning of a string correspond to a supported token\n  const isTokenStartRegExp = new RegExp(`^(${Object.keys(utils.formatTokenMap).join('|')})`);\n  let currentTokenValue = '';\n  for (let i = 0; i < expandedFormat.length; i += 1) {\n    const escapedPartOfCurrentChar = escapedParts.find(escapeIndex => escapeIndex.start <= i && escapeIndex.end >= i);\n    const char = expandedFormat[i];\n    const isEscapedChar = escapedPartOfCurrentChar != null;\n    const potentialToken = `${currentTokenValue}${expandedFormat.slice(i)}`;\n    if (!isEscapedChar && char.match(/([A-Za-z]+)/) && isTokenStartRegExp.test(potentialToken)) {\n      currentTokenValue += char;\n    } else {\n      // If we are on the opening or closing character of an escaped part of the format,\n      // Then we ignore this character.\n      const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;\n      if (!isEscapeBoundary) {\n        commitToken(currentTokenValue);\n        currentTokenValue = '';\n        if (sections.length === 0) {\n          startSeparator += char;\n        } else {\n          sections[sections.length - 1].endSeparator += char;\n        }\n      }\n    }\n  }\n  commitToken(currentTokenValue);\n  return sections.map(section => {\n    const cleanSeparator = separator => {\n      let cleanedSeparator = separator;\n      if (cleanedSeparator !== null && cleanedSeparator.includes(' ')) {\n        cleanedSeparator = `\\u2069${cleanedSeparator}\\u2066`;\n      }\n      if (cleanedSeparator === '/') {\n        cleanedSeparator = ' / ';\n      }\n      return cleanedSeparator;\n    };\n    section.startSeparator = cleanSeparator(section.startSeparator);\n    section.endSeparator = cleanSeparator(section.endSeparator);\n    return section;\n  });\n};\n\n/**\n * Some date libraries like `dayjs` don't support parsing from date with escaped characters.\n * To make sure that the parsing works, we are building a format and a date without any separator.\n */\nexport const getDateFromDateSections = (utils, sections) => {\n  // If we have both a day and a weekDay section,\n  // Then we skip the weekDay in the parsing because libraries like dayjs can't parse complicated formats containing a weekDay.\n  // dayjs(dayjs().format('dddd MMMM D YYYY'), 'dddd MMMM D YYYY')) // returns `Invalid Date` even if the format is valid.\n  const shouldSkipWeekDays = sections.some(section => section.type === 'day');\n  const sectionFormats = [];\n  const sectionValues = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const shouldSkip = shouldSkipWeekDays && section.type === 'weekDay';\n    if (!shouldSkip) {\n      sectionFormats.push(section.format);\n      sectionValues.push(getSectionVisibleValue(section, 'non-input'));\n    }\n  }\n  const formatWithoutSeparator = sectionFormats.join(' ');\n  const dateWithoutSeparatorStr = sectionValues.join(' ');\n  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);\n};\nexport const createDateStrForInputFromSections = (sections, isRTL) => {\n  const formattedSections = sections.map(section => `${section.startSeparator}${getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr')}${section.endSeparator}`);\n  const dateStr = formattedSections.join('');\n  if (!isRTL) {\n    return dateStr;\n  }\n\n  // \\u2066: start left-to-right isolation\n  // \\u2067: start right-to-left isolation\n  // \\u2068: start first strong character isolation\n  // \\u2069: pop isolation\n  // wrap into an isolated group such that separators can split the string in smaller ones by adding \\u2069\\u2068\n  return `\\u2066${dateStr}\\u2069`;\n};\nexport const getSectionsBoundaries = utils => {\n  const today = utils.date();\n  const endOfYear = utils.endOfYear(today);\n  const {\n    maxDaysInMonth,\n    longestMonth\n  } = utils.getMonthArray(today).reduce((acc, month) => {\n    const daysInMonth = utils.getDaysInMonth(month);\n    if (daysInMonth > acc.maxDaysInMonth) {\n      return {\n        maxDaysInMonth: daysInMonth,\n        longestMonth: month\n      };\n    }\n    return acc;\n  }, {\n    maxDaysInMonth: 0,\n    longestMonth: null\n  });\n  return {\n    year: _ref => {\n      let {\n        format\n      } = _ref;\n      return {\n        minimum: 0,\n        maximum: isFourDigitYearFormat(utils, format) ? 9999 : 99\n      };\n    },\n    month: () => ({\n      minimum: 1,\n      // Assumption: All years have the same amount of months\n      maximum: utils.getMonth(endOfYear) + 1\n    }),\n    day: _ref2 => {\n      let {\n        currentDate\n      } = _ref2;\n      return {\n        minimum: 1,\n        maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,\n        longestMonth: longestMonth\n      };\n    },\n    weekDay: _ref3 => {\n      let {\n        format,\n        contentType\n      } = _ref3;\n      if (contentType === 'digit') {\n        const daysInWeek = getDaysInWeekStr(utils, format).map(Number);\n        return {\n          minimum: Math.min(...daysInWeek),\n          maximum: Math.max(...daysInWeek)\n        };\n      }\n      return {\n        minimum: 1,\n        maximum: 7\n      };\n    },\n    hours: _ref4 => {\n      let {\n        format\n      } = _ref4;\n      const lastHourInDay = utils.getHours(endOfYear);\n      const hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();\n      if (hasMeridiem) {\n        return {\n          minimum: 1,\n          maximum: Number(utils.formatByString(utils.startOfDay(today), format))\n        };\n      }\n      return {\n        minimum: 0,\n        maximum: lastHourInDay\n      };\n    },\n    minutes: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of minutes\n      maximum: utils.getMinutes(endOfYear)\n    }),\n    seconds: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of seconds\n      maximum: utils.getSeconds(endOfYear)\n    }),\n    meridiem: () => ({\n      minimum: 0,\n      maximum: 0\n    })\n  };\n};\nlet warnedOnceInvalidSection = false;\nexport const validateSections = (sections, valueType) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceInvalidSection) {\n      const supportedSections = [];\n      if (['date', 'date-time'].includes(valueType)) {\n        supportedSections.push('weekDay', 'day', 'month', 'year');\n      }\n      if (['time', 'date-time'].includes(valueType)) {\n        supportedSections.push('hours', 'minutes', 'seconds', 'meridiem');\n      }\n      const invalidSection = sections.find(section => !supportedSections.includes(section.type));\n      if (invalidSection) {\n        console.warn(`MUI: The field component you are using is not compatible with the \"${invalidSection.type} date section.`, `The supported date sections are [\"${supportedSections.join('\", \"')}\"]\\`.`);\n        warnedOnceInvalidSection = true;\n      }\n    }\n  }\n};\nconst transferDateSectionValue = (utils, section, dateToTransferFrom, dateToTransferTo) => {\n  switch (section.type) {\n    case 'year':\n      {\n        return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));\n      }\n    case 'month':\n      {\n        return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));\n      }\n    case 'weekDay':\n      {\n        const formattedDaysInWeek = getDaysInWeekStr(utils, section.format);\n        const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);\n        const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);\n        const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);\n        const diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;\n        return utils.addDays(dateToTransferFrom, diff);\n      }\n    case 'day':\n      {\n        return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));\n      }\n    case 'meridiem':\n      {\n        const isAM = utils.getHours(dateToTransferFrom) < 12;\n        const mergedDateHours = utils.getHours(dateToTransferTo);\n        if (isAM && mergedDateHours >= 12) {\n          return utils.addHours(dateToTransferTo, -12);\n        }\n        if (!isAM && mergedDateHours < 12) {\n          return utils.addHours(dateToTransferTo, 12);\n        }\n        return dateToTransferTo;\n      }\n    case 'hours':\n      {\n        return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));\n      }\n    case 'minutes':\n      {\n        return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));\n      }\n    case 'seconds':\n      {\n        return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));\n      }\n    default:\n      {\n        return dateToTransferTo;\n      }\n  }\n};\nexport const mergeDateIntoReferenceDate = (utils, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) => sections.reduce((mergedDate, section) => {\n  if (!shouldLimitToEditedSections || section.modified) {\n    return transferDateSectionValue(utils, section, dateToTransferFrom, mergedDate);\n  }\n  return mergedDate;\n}, referenceDate);\nexport const isAndroid = () => navigator.userAgent.toLowerCase().indexOf('android') > -1;\nexport const clampDaySectionIfPossible = (utils, sections, sectionsValueBoundaries) => {\n  // We can only clamp the day value if:\n  // 1. if all the sections are filled (except the week day section which can be empty)\n  // 2. there is a day section\n  const canClamp = sections.every(section => section.type === 'weekDay' || section.value !== '') && sections.some(section => section.type === 'day');\n  if (!canClamp) {\n    return null;\n  }\n\n  // We try to generate a valid date representing the start of the month of the invalid date typed by the user.\n  const sectionsForStartOfMonth = sections.map(section => {\n    if (section.type !== 'day') {\n      return section;\n    }\n    const dayBoundaries = sectionsValueBoundaries.day({\n      currentDate: null,\n      format: section.format,\n      contentType: section.contentType\n    });\n    return _extends({}, section, {\n      value: cleanDigitSectionValue(utils, dayBoundaries.minimum, section.type, section.format, section.hasLeadingZeros, dayBoundaries)\n    });\n  });\n  const startOfMonth = getDateFromDateSections(utils, sectionsForStartOfMonth);\n\n  // Even the start of the month is invalid, we probably have other invalid sections, the clamping failed.\n  if (startOfMonth == null || !utils.isValid(startOfMonth)) {\n    return null;\n  }\n\n  // The only invalid section was the day of the month, we replace its value with the maximum boundary for the correct month.\n  return sections.map(section => {\n    if (section.type !== 'day') {\n      return section;\n    }\n    const dayBoundaries = sectionsValueBoundaries.day({\n      currentDate: startOfMonth,\n      format: section.format,\n      contentType: section.contentType\n    });\n    if (Number(section.value) <= dayBoundaries.maximum) {\n      return section;\n    }\n    return _extends({}, section, {\n      value: dayBoundaries.maximum.toString()\n    });\n  });\n};\nexport const getSectionOrder = (sections, isRTL) => {\n  const neighbors = {};\n  if (!isRTL) {\n    sections.forEach((_, index) => {\n      const leftIndex = index === 0 ? null : index - 1;\n      const rightIndex = index === sections.length - 1 ? null : index + 1;\n      neighbors[index] = {\n        leftIndex,\n        rightIndex\n      };\n    });\n    return {\n      neighbors,\n      startIndex: 0,\n      endIndex: sections.length - 1\n    };\n  }\n  const rtl2ltr = {};\n  const ltr2rtl = {};\n  let groupedSectionsStart = 0;\n  let groupedSectionsEnd = 0;\n  let RTLIndex = sections.length - 1;\n  while (RTLIndex >= 0) {\n    groupedSectionsEnd = sections.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    (section, index) => {\n      var _section$endSeparator;\n      return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(' '));\n    });\n    if (groupedSectionsEnd === -1) {\n      groupedSectionsEnd = sections.length - 1;\n    }\n    for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {\n      ltr2rtl[i] = RTLIndex;\n      rtl2ltr[RTLIndex] = i;\n      RTLIndex -= 1;\n    }\n    groupedSectionsStart = groupedSectionsEnd + 1;\n  }\n  sections.forEach((_, index) => {\n    const rtlIndex = ltr2rtl[index];\n    const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];\n    const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];\n    neighbors[index] = {\n      leftIndex,\n      rightIndex\n    };\n  });\n  return {\n    neighbors,\n    startIndex: rtl2ltr[0],\n    endIndex: rtl2ltr[sections.length - 1]\n  };\n};","map":{"version":3,"names":["_extends","getDateSectionConfigFromFormatToken","utils","formatToken","config","formatTokenMap","Error","join","type","contentType","sectionType","getDeltaFromKeyCode","keyCode","getDaysInWeekStr","format","elements","now","date","startDate","startOfWeek","endDate","endOfWeek","current","isBefore","push","addDays","map","weekDay","formatByString","getLetterEditingOptions","getMonthArray","month","startOfDay","endOfDay","cleanDigitSectionValue","value","hasLeadingZeros","sectionBoundaries","hasLetter","startOfYear","startOfYearStr","Number","isNaN","process","env","NODE_ENV","setDate","longestMonth","valueStr","toString","size","length","cleanValueStr","adjustSectionValue","section","sectionsValueBoundaries","activeDate","delta","isStart","isEnd","shouldSetAbsolute","adjustDigitSection","currentDate","getCleanValue","minimum","maximum","currentSectionValue","parseInt","newSectionValueNumber","adjustLetterSection","options","currentOptionIndex","indexOf","newOptionIndex","getSectionVisibleValue","target","placeholder","shouldAddInvisibleSpace","includes","cleanString","dirtyString","replace","addPositionPropertiesToSections","sections","isRTL","position","positionInInput","newSections","i","renderedValue","sectionStr","startSeparator","endSeparator","sectionLength","sectionLengthInInput","cleanedValue","startInInput","endInInput","start","end","getSectionPlaceholder","localeText","sectionConfig","currentTokenValue","fieldYearPlaceholder","digitAmount","fieldMonthPlaceholder","fieldDayPlaceholder","fieldWeekDayPlaceholder","fieldHoursPlaceholder","fieldMinutesPlaceholder","fieldSecondsPlaceholder","fieldMeridiemPlaceholder","changeSectionValueFormat","currentFormat","newFormat","parse","isFourDigitYearFormat","doesSectionHaveLeadingZeros","formatted0001","setYear","formatted2001","startOfMonth","setHours","setMinutes","getEscapedPartsFromFormat","escapedParts","startChar","endChar","escapedCharacters","regExp","RegExp","match","exec","index","lastIndex","splitFormatIntoSections","commitToken","token","sectionValue","isValid","modified","formatExpansionOverflow","prevFormat","nextFormat","expandFormat","expandedFormat","isTokenStartRegExp","Object","keys","escapedPartOfCurrentChar","find","escapeIndex","char","isEscapedChar","potentialToken","slice","test","isEscapeBoundary","cleanSeparator","separator","cleanedSeparator","getDateFromDateSections","shouldSkipWeekDays","some","sectionFormats","sectionValues","shouldSkip","formatWithoutSeparator","dateWithoutSeparatorStr","createDateStrForInputFromSections","formattedSections","dateStr","getSectionsBoundaries","today","endOfYear","maxDaysInMonth","reduce","acc","daysInMonth","getDaysInMonth","year","getMonth","day","daysInWeek","Math","min","max","hours","lastHourInDay","getHours","hasMeridiem","minutes","getMinutes","seconds","getSeconds","meridiem","warnedOnceInvalidSection","validateSections","valueType","supportedSections","invalidSection","console","warn","transferDateSectionValue","dateToTransferFrom","dateToTransferTo","getYear","setMonth","formattedDaysInWeek","dayInWeekStrOfActiveDate","dayInWeekOfActiveDate","dayInWeekOfNewSectionValue","diff","getDate","isAM","mergedDateHours","addHours","setSeconds","mergeDateIntoReferenceDate","referenceDate","shouldLimitToEditedSections","mergedDate","isAndroid","navigator","userAgent","toLowerCase","clampDaySectionIfPossible","canClamp","every","sectionsForStartOfMonth","dayBoundaries","getSectionOrder","neighbors","forEach","_","leftIndex","rightIndex","startIndex","endIndex","rtl2ltr","ltr2rtl","groupedSectionsStart","groupedSectionsEnd","RTLIndex","findIndex","_section$endSeparator","rtlIndex"],"sources":["D:/SE/myreact/node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.utils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport const getDateSectionConfigFromFormatToken = (utils, formatToken) => {\n  const config = utils.formatTokenMap[formatToken];\n  if (config == null) {\n    throw new Error([`MUI: The token \"${formatToken}\" is not supported by the Date and Time Pickers.`, 'Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported.'].join('\\n'));\n  }\n  if (typeof config === 'string') {\n    return {\n      type: config,\n      contentType: config === 'meridiem' ? 'letter' : 'digit'\n    };\n  }\n  return {\n    type: config.sectionType,\n    contentType: config.contentType\n  };\n};\nconst getDeltaFromKeyCode = keyCode => {\n  switch (keyCode) {\n    case 'ArrowUp':\n      return 1;\n    case 'ArrowDown':\n      return -1;\n    case 'PageUp':\n      return 5;\n    case 'PageDown':\n      return -5;\n    default:\n      return 0;\n  }\n};\nexport const getDaysInWeekStr = (utils, format) => {\n  const elements = [];\n  const now = utils.date();\n  const startDate = utils.startOfWeek(now);\n  const endDate = utils.endOfWeek(now);\n  let current = startDate;\n  while (utils.isBefore(current, endDate)) {\n    elements.push(current);\n    current = utils.addDays(current, 1);\n  }\n  return elements.map(weekDay => utils.formatByString(weekDay, format));\n};\nexport const getLetterEditingOptions = (utils, sectionType, format) => {\n  switch (sectionType) {\n    case 'month':\n      {\n        return utils.getMonthArray(utils.date()).map(month => utils.formatByString(month, format));\n      }\n    case 'weekDay':\n      {\n        return getDaysInWeekStr(utils, format);\n      }\n    case 'meridiem':\n      {\n        const now = utils.date();\n        return [utils.startOfDay(now), utils.endOfDay(now)].map(date => utils.formatByString(date, format));\n      }\n    default:\n      {\n        return [];\n      }\n  }\n};\nexport const cleanDigitSectionValue = (utils, value, sectionType, format, hasLeadingZeros, sectionBoundaries) => {\n  const hasLetter = () => {\n    const startOfYear = utils.startOfYear(utils.date());\n    const startOfYearStr = utils.formatByString(startOfYear, format);\n    return Number.isNaN(Number(startOfYearStr));\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    if (sectionType !== 'day' && hasLetter()) {\n      throw new Error([`MUI: The token \"${format}\" is a digit format with letter in it.'\n             This type of format is only supported for 'day' sections`].join('\\n'));\n    }\n  }\n  if (sectionType === 'day' && hasLetter()) {\n    const date = utils.setDate(sectionBoundaries.longestMonth, value);\n    return utils.formatByString(date, format);\n  }\n\n  // queryValue without leading `0` (`01` => `1`)\n  const valueStr = value.toString();\n  if (hasLeadingZeros) {\n    const size = utils.formatByString(utils.date(), format).length;\n    let cleanValueStr = valueStr;\n\n    // Remove the leading zeros\n    cleanValueStr = Number(cleanValueStr).toString();\n\n    // Add enough leading zeros to fill the section\n    while (cleanValueStr.length < size) {\n      cleanValueStr = `0${cleanValueStr}`;\n    }\n    return cleanValueStr;\n  }\n  return valueStr;\n};\nexport const adjustSectionValue = (utils, section, keyCode, sectionsValueBoundaries, activeDate) => {\n  const delta = getDeltaFromKeyCode(keyCode);\n  const isStart = keyCode === 'Home';\n  const isEnd = keyCode === 'End';\n  const shouldSetAbsolute = section.value === '' || isStart || isEnd;\n  const adjustDigitSection = () => {\n    const sectionBoundaries = sectionsValueBoundaries[section.type]({\n      currentDate: activeDate,\n      format: section.format,\n      contentType: section.contentType\n    });\n    const getCleanValue = value => cleanDigitSectionValue(utils, value, section.type, section.format, section.hasLeadingZeros, sectionBoundaries);\n    if (shouldSetAbsolute) {\n      if (section.type === 'year' && !isEnd && !isStart) {\n        return utils.formatByString(utils.date(), section.format);\n      }\n      if (delta > 0 || isStart) {\n        return getCleanValue(sectionBoundaries.minimum);\n      }\n      return getCleanValue(sectionBoundaries.maximum);\n    }\n    const currentSectionValue = parseInt(section.value, 10);\n    const newSectionValueNumber = currentSectionValue + delta;\n    if (newSectionValueNumber > sectionBoundaries.maximum) {\n      return getCleanValue(sectionBoundaries.minimum);\n    }\n    if (newSectionValueNumber < sectionBoundaries.minimum) {\n      return getCleanValue(sectionBoundaries.maximum);\n    }\n    return getCleanValue(newSectionValueNumber);\n  };\n  const adjustLetterSection = () => {\n    const options = getLetterEditingOptions(utils, section.type, section.format);\n    if (options.length === 0) {\n      return section.value;\n    }\n    if (shouldSetAbsolute) {\n      if (delta > 0 || isStart) {\n        return options[0];\n      }\n      return options[options.length - 1];\n    }\n    const currentOptionIndex = options.indexOf(section.value);\n    const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;\n    return options[newOptionIndex];\n  };\n  if (section.contentType === 'digit') {\n    return adjustDigitSection();\n  }\n  return adjustLetterSection();\n};\nexport const getSectionVisibleValue = (section, target) => {\n  let value = section.value || section.placeholder;\n\n  // In the input, we add an empty character at the end of each section without leading zeros.\n  // This makes sure that `onChange` will always be fired.\n  // Otherwise, when your input value equals `1/dd/yyyy` (format `M/DD/YYYY` on DayJs),\n  // If you press `1`, on the first section, the new value is also `1/dd/yyyy`,\n  // So the browser will not fire the input `onChange`.\n  const shouldAddInvisibleSpace = ['input-rtl', 'input-ltr'].includes(target) && section.contentType === 'digit' && !section.hasLeadingZeros && value.length === 1;\n  if (shouldAddInvisibleSpace) {\n    value = `${value}\\u200e`;\n  }\n  if (target === 'input-rtl') {\n    value = `\\u2068${value}\\u2069`;\n  }\n  return value;\n};\nexport const cleanString = dirtyString => dirtyString.replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '');\nexport const addPositionPropertiesToSections = (sections, isRTL) => {\n  let position = 0;\n  let positionInInput = isRTL ? 1 : 0;\n  const newSections = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const renderedValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');\n    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;\n    const sectionLength = cleanString(sectionStr).length;\n    const sectionLengthInInput = sectionStr.length;\n\n    // The ...InInput values consider the unicode characters but do include them in their indexes\n    const cleanedValue = cleanString(renderedValue);\n    const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;\n    const endInInput = startInInput + cleanedValue.length;\n    newSections.push(_extends({}, section, {\n      start: position,\n      end: position + sectionLength,\n      startInInput,\n      endInInput\n    }));\n    position += sectionLength;\n    // Move position to the end of string associated to the current section\n    positionInInput += sectionLengthInInput;\n  }\n  return newSections;\n};\nconst getSectionPlaceholder = (utils, localeText, sectionConfig, currentTokenValue) => {\n  switch (sectionConfig.type) {\n    case 'year':\n      {\n        return localeText.fieldYearPlaceholder({\n          digitAmount: utils.formatByString(utils.date(), currentTokenValue).length\n        });\n      }\n    case 'month':\n      {\n        return localeText.fieldMonthPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'day':\n      {\n        return localeText.fieldDayPlaceholder();\n      }\n    case 'weekDay':\n      {\n        return localeText.fieldWeekDayPlaceholder({\n          contentType: sectionConfig.contentType\n        });\n      }\n    case 'hours':\n      {\n        return localeText.fieldHoursPlaceholder();\n      }\n    case 'minutes':\n      {\n        return localeText.fieldMinutesPlaceholder();\n      }\n    case 'seconds':\n      {\n        return localeText.fieldSecondsPlaceholder();\n      }\n    case 'meridiem':\n      {\n        return localeText.fieldMeridiemPlaceholder();\n      }\n    default:\n      {\n        return currentTokenValue;\n      }\n  }\n};\nexport const changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (getDateSectionConfigFromFormatToken(utils, currentFormat).type === 'weekDay') {\n      throw new Error(\"changeSectionValueFormat doesn't support week day formats\");\n    }\n  }\n  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);\n};\nconst isFourDigitYearFormat = (utils, format) => utils.formatByString(utils.date(), format).length === 4;\nexport const doesSectionHaveLeadingZeros = (utils, contentType, sectionType, format) => {\n  if (contentType !== 'digit') {\n    return false;\n  }\n  switch (sectionType) {\n    // We can't use `changeSectionValueFormat`, because  `utils.parse('1', 'YYYY')` returns `1971` instead of `1`.\n    case 'year':\n      {\n        if (isFourDigitYearFormat(utils, format)) {\n          const formatted0001 = utils.formatByString(utils.setYear(utils.date(), 1), format);\n          return formatted0001 === '0001';\n        }\n        const formatted2001 = utils.formatByString(utils.setYear(utils.date(), 2001), format);\n        return formatted2001 === '01';\n      }\n    case 'month':\n      {\n        return utils.formatByString(utils.startOfYear(utils.date()), format).length > 1;\n      }\n    case 'day':\n      {\n        return utils.formatByString(utils.startOfMonth(utils.date()), format).length > 1;\n      }\n    case 'weekDay':\n      {\n        return utils.formatByString(utils.startOfWeek(utils.date()), format).length > 1;\n      }\n    case 'hours':\n      {\n        return utils.formatByString(utils.setHours(utils.date(), 1), format).length > 1;\n      }\n    case 'minutes':\n      {\n        return utils.formatByString(utils.setMinutes(utils.date(), 1), format).length > 1;\n      }\n    case 'seconds':\n      {\n        return utils.formatByString(utils.setMinutes(utils.date(), 1), format).length > 1;\n      }\n    default:\n      {\n        throw new Error('Invalid section type');\n      }\n  }\n};\nconst getEscapedPartsFromFormat = (utils, format) => {\n  const escapedParts = [];\n  const {\n    start: startChar,\n    end: endChar\n  } = utils.escapedCharacters;\n  const regExp = new RegExp(`(\\\\${startChar}[^\\\\${endChar}]*\\\\${endChar})+`, 'g');\n  let match = null;\n  // eslint-disable-next-line no-cond-assign\n  while (match = regExp.exec(format)) {\n    escapedParts.push({\n      start: match.index,\n      end: regExp.lastIndex - 1\n    });\n  }\n  return escapedParts;\n};\nexport const splitFormatIntoSections = (utils, localeText, format, date) => {\n  let startSeparator = '';\n  const sections = [];\n  const commitToken = token => {\n    if (token === '') {\n      return null;\n    }\n    const sectionConfig = getDateSectionConfigFromFormatToken(utils, token);\n    const sectionValue = date == null || !utils.isValid(date) ? '' : utils.formatByString(date, token);\n    const hasLeadingZeros = doesSectionHaveLeadingZeros(utils, sectionConfig.contentType, sectionConfig.type, token);\n    sections.push(_extends({}, sectionConfig, {\n      format: token,\n      value: sectionValue,\n      placeholder: getSectionPlaceholder(utils, localeText, sectionConfig, token),\n      hasLeadingZeros,\n      startSeparator: sections.length === 0 ? startSeparator : '',\n      endSeparator: '',\n      modified: false\n    }));\n    return null;\n  };\n\n  // Expand the provided format\n  let formatExpansionOverflow = 10;\n  let prevFormat = format;\n  let nextFormat = utils.expandFormat(format);\n  while (nextFormat !== prevFormat) {\n    prevFormat = nextFormat;\n    nextFormat = utils.expandFormat(prevFormat);\n    formatExpansionOverflow -= 1;\n    if (formatExpansionOverflow < 0) {\n      throw new Error('MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component');\n    }\n  }\n  const expandedFormat = nextFormat;\n\n  // Get start/end indexes of escaped sections\n  const escapedParts = getEscapedPartsFromFormat(utils, expandedFormat);\n\n  // This RegExp test if the beginning of a string correspond to a supported token\n  const isTokenStartRegExp = new RegExp(`^(${Object.keys(utils.formatTokenMap).join('|')})`);\n  let currentTokenValue = '';\n  for (let i = 0; i < expandedFormat.length; i += 1) {\n    const escapedPartOfCurrentChar = escapedParts.find(escapeIndex => escapeIndex.start <= i && escapeIndex.end >= i);\n    const char = expandedFormat[i];\n    const isEscapedChar = escapedPartOfCurrentChar != null;\n    const potentialToken = `${currentTokenValue}${expandedFormat.slice(i)}`;\n    if (!isEscapedChar && char.match(/([A-Za-z]+)/) && isTokenStartRegExp.test(potentialToken)) {\n      currentTokenValue += char;\n    } else {\n      // If we are on the opening or closing character of an escaped part of the format,\n      // Then we ignore this character.\n      const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;\n      if (!isEscapeBoundary) {\n        commitToken(currentTokenValue);\n        currentTokenValue = '';\n        if (sections.length === 0) {\n          startSeparator += char;\n        } else {\n          sections[sections.length - 1].endSeparator += char;\n        }\n      }\n    }\n  }\n  commitToken(currentTokenValue);\n  return sections.map(section => {\n    const cleanSeparator = separator => {\n      let cleanedSeparator = separator;\n      if (cleanedSeparator !== null && cleanedSeparator.includes(' ')) {\n        cleanedSeparator = `\\u2069${cleanedSeparator}\\u2066`;\n      }\n      if (cleanedSeparator === '/') {\n        cleanedSeparator = ' / ';\n      }\n      return cleanedSeparator;\n    };\n    section.startSeparator = cleanSeparator(section.startSeparator);\n    section.endSeparator = cleanSeparator(section.endSeparator);\n    return section;\n  });\n};\n\n/**\n * Some date libraries like `dayjs` don't support parsing from date with escaped characters.\n * To make sure that the parsing works, we are building a format and a date without any separator.\n */\nexport const getDateFromDateSections = (utils, sections) => {\n  // If we have both a day and a weekDay section,\n  // Then we skip the weekDay in the parsing because libraries like dayjs can't parse complicated formats containing a weekDay.\n  // dayjs(dayjs().format('dddd MMMM D YYYY'), 'dddd MMMM D YYYY')) // returns `Invalid Date` even if the format is valid.\n  const shouldSkipWeekDays = sections.some(section => section.type === 'day');\n  const sectionFormats = [];\n  const sectionValues = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    const section = sections[i];\n    const shouldSkip = shouldSkipWeekDays && section.type === 'weekDay';\n    if (!shouldSkip) {\n      sectionFormats.push(section.format);\n      sectionValues.push(getSectionVisibleValue(section, 'non-input'));\n    }\n  }\n  const formatWithoutSeparator = sectionFormats.join(' ');\n  const dateWithoutSeparatorStr = sectionValues.join(' ');\n  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);\n};\nexport const createDateStrForInputFromSections = (sections, isRTL) => {\n  const formattedSections = sections.map(section => `${section.startSeparator}${getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr')}${section.endSeparator}`);\n  const dateStr = formattedSections.join('');\n  if (!isRTL) {\n    return dateStr;\n  }\n\n  // \\u2066: start left-to-right isolation\n  // \\u2067: start right-to-left isolation\n  // \\u2068: start first strong character isolation\n  // \\u2069: pop isolation\n  // wrap into an isolated group such that separators can split the string in smaller ones by adding \\u2069\\u2068\n  return `\\u2066${dateStr}\\u2069`;\n};\nexport const getSectionsBoundaries = utils => {\n  const today = utils.date();\n  const endOfYear = utils.endOfYear(today);\n  const {\n    maxDaysInMonth,\n    longestMonth\n  } = utils.getMonthArray(today).reduce((acc, month) => {\n    const daysInMonth = utils.getDaysInMonth(month);\n    if (daysInMonth > acc.maxDaysInMonth) {\n      return {\n        maxDaysInMonth: daysInMonth,\n        longestMonth: month\n      };\n    }\n    return acc;\n  }, {\n    maxDaysInMonth: 0,\n    longestMonth: null\n  });\n  return {\n    year: ({\n      format\n    }) => ({\n      minimum: 0,\n      maximum: isFourDigitYearFormat(utils, format) ? 9999 : 99\n    }),\n    month: () => ({\n      minimum: 1,\n      // Assumption: All years have the same amount of months\n      maximum: utils.getMonth(endOfYear) + 1\n    }),\n    day: ({\n      currentDate\n    }) => ({\n      minimum: 1,\n      maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,\n      longestMonth: longestMonth\n    }),\n    weekDay: ({\n      format,\n      contentType\n    }) => {\n      if (contentType === 'digit') {\n        const daysInWeek = getDaysInWeekStr(utils, format).map(Number);\n        return {\n          minimum: Math.min(...daysInWeek),\n          maximum: Math.max(...daysInWeek)\n        };\n      }\n      return {\n        minimum: 1,\n        maximum: 7\n      };\n    },\n    hours: ({\n      format\n    }) => {\n      const lastHourInDay = utils.getHours(endOfYear);\n      const hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();\n      if (hasMeridiem) {\n        return {\n          minimum: 1,\n          maximum: Number(utils.formatByString(utils.startOfDay(today), format))\n        };\n      }\n      return {\n        minimum: 0,\n        maximum: lastHourInDay\n      };\n    },\n    minutes: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of minutes\n      maximum: utils.getMinutes(endOfYear)\n    }),\n    seconds: () => ({\n      minimum: 0,\n      // Assumption: All years have the same amount of seconds\n      maximum: utils.getSeconds(endOfYear)\n    }),\n    meridiem: () => ({\n      minimum: 0,\n      maximum: 0\n    })\n  };\n};\nlet warnedOnceInvalidSection = false;\nexport const validateSections = (sections, valueType) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceInvalidSection) {\n      const supportedSections = [];\n      if (['date', 'date-time'].includes(valueType)) {\n        supportedSections.push('weekDay', 'day', 'month', 'year');\n      }\n      if (['time', 'date-time'].includes(valueType)) {\n        supportedSections.push('hours', 'minutes', 'seconds', 'meridiem');\n      }\n      const invalidSection = sections.find(section => !supportedSections.includes(section.type));\n      if (invalidSection) {\n        console.warn(`MUI: The field component you are using is not compatible with the \"${invalidSection.type} date section.`, `The supported date sections are [\"${supportedSections.join('\", \"')}\"]\\`.`);\n        warnedOnceInvalidSection = true;\n      }\n    }\n  }\n};\nconst transferDateSectionValue = (utils, section, dateToTransferFrom, dateToTransferTo) => {\n  switch (section.type) {\n    case 'year':\n      {\n        return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));\n      }\n    case 'month':\n      {\n        return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));\n      }\n    case 'weekDay':\n      {\n        const formattedDaysInWeek = getDaysInWeekStr(utils, section.format);\n        const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);\n        const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);\n        const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);\n        const diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;\n        return utils.addDays(dateToTransferFrom, diff);\n      }\n    case 'day':\n      {\n        return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));\n      }\n    case 'meridiem':\n      {\n        const isAM = utils.getHours(dateToTransferFrom) < 12;\n        const mergedDateHours = utils.getHours(dateToTransferTo);\n        if (isAM && mergedDateHours >= 12) {\n          return utils.addHours(dateToTransferTo, -12);\n        }\n        if (!isAM && mergedDateHours < 12) {\n          return utils.addHours(dateToTransferTo, 12);\n        }\n        return dateToTransferTo;\n      }\n    case 'hours':\n      {\n        return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));\n      }\n    case 'minutes':\n      {\n        return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));\n      }\n    case 'seconds':\n      {\n        return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));\n      }\n    default:\n      {\n        return dateToTransferTo;\n      }\n  }\n};\nexport const mergeDateIntoReferenceDate = (utils, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) => sections.reduce((mergedDate, section) => {\n  if (!shouldLimitToEditedSections || section.modified) {\n    return transferDateSectionValue(utils, section, dateToTransferFrom, mergedDate);\n  }\n  return mergedDate;\n}, referenceDate);\nexport const isAndroid = () => navigator.userAgent.toLowerCase().indexOf('android') > -1;\nexport const clampDaySectionIfPossible = (utils, sections, sectionsValueBoundaries) => {\n  // We can only clamp the day value if:\n  // 1. if all the sections are filled (except the week day section which can be empty)\n  // 2. there is a day section\n  const canClamp = sections.every(section => section.type === 'weekDay' || section.value !== '') && sections.some(section => section.type === 'day');\n  if (!canClamp) {\n    return null;\n  }\n\n  // We try to generate a valid date representing the start of the month of the invalid date typed by the user.\n  const sectionsForStartOfMonth = sections.map(section => {\n    if (section.type !== 'day') {\n      return section;\n    }\n    const dayBoundaries = sectionsValueBoundaries.day({\n      currentDate: null,\n      format: section.format,\n      contentType: section.contentType\n    });\n    return _extends({}, section, {\n      value: cleanDigitSectionValue(utils, dayBoundaries.minimum, section.type, section.format, section.hasLeadingZeros, dayBoundaries)\n    });\n  });\n  const startOfMonth = getDateFromDateSections(utils, sectionsForStartOfMonth);\n\n  // Even the start of the month is invalid, we probably have other invalid sections, the clamping failed.\n  if (startOfMonth == null || !utils.isValid(startOfMonth)) {\n    return null;\n  }\n\n  // The only invalid section was the day of the month, we replace its value with the maximum boundary for the correct month.\n  return sections.map(section => {\n    if (section.type !== 'day') {\n      return section;\n    }\n    const dayBoundaries = sectionsValueBoundaries.day({\n      currentDate: startOfMonth,\n      format: section.format,\n      contentType: section.contentType\n    });\n    if (Number(section.value) <= dayBoundaries.maximum) {\n      return section;\n    }\n    return _extends({}, section, {\n      value: dayBoundaries.maximum.toString()\n    });\n  });\n};\nexport const getSectionOrder = (sections, isRTL) => {\n  const neighbors = {};\n  if (!isRTL) {\n    sections.forEach((_, index) => {\n      const leftIndex = index === 0 ? null : index - 1;\n      const rightIndex = index === sections.length - 1 ? null : index + 1;\n      neighbors[index] = {\n        leftIndex,\n        rightIndex\n      };\n    });\n    return {\n      neighbors,\n      startIndex: 0,\n      endIndex: sections.length - 1\n    };\n  }\n  const rtl2ltr = {};\n  const ltr2rtl = {};\n  let groupedSectionsStart = 0;\n  let groupedSectionsEnd = 0;\n  let RTLIndex = sections.length - 1;\n  while (RTLIndex >= 0) {\n    groupedSectionsEnd = sections.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    (section, index) => {\n      var _section$endSeparator;\n      return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(' '));\n    });\n    if (groupedSectionsEnd === -1) {\n      groupedSectionsEnd = sections.length - 1;\n    }\n    for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {\n      ltr2rtl[i] = RTLIndex;\n      rtl2ltr[RTLIndex] = i;\n      RTLIndex -= 1;\n    }\n    groupedSectionsStart = groupedSectionsEnd + 1;\n  }\n  sections.forEach((_, index) => {\n    const rtlIndex = ltr2rtl[index];\n    const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];\n    const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];\n    neighbors[index] = {\n      leftIndex,\n      rightIndex\n    };\n  });\n  return {\n    neighbors,\n    startIndex: rtl2ltr[0],\n    endIndex: rtl2ltr[sections.length - 1]\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}