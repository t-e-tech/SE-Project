{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useUtils } from '../useUtils';\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions } from './useField.utils';\nconst QUERY_LIFE_DURATION_MS = 5000;\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport const useFieldCharacterEditing = _ref => {\n  let {\n    sections,\n    updateSectionValue,\n    sectionsValueBoundaries,\n    setTempAndroidValueStr\n  } = _ref;\n  const utils = useUtils();\n  const [query, setQuery] = React.useState(null);\n  const resetQuery = useEventCallback(() => setQuery(null));\n  React.useEffect(() => {\n    var _sections$query$secti;\n    if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {\n      resetQuery();\n    }\n  }, [sections, query, resetQuery]);\n  React.useEffect(() => {\n    if (query != null) {\n      const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);\n      return () => {\n        window.clearTimeout(timeout);\n      };\n    }\n    return () => {};\n  }, [query, resetQuery]);\n  const applyQuery = (_ref2, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    let {\n      keyPressed,\n      sectionIndex\n    } = _ref2;\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenated value\n    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      resetQuery();\n      return null;\n    }\n    setQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(utils, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = (queryValue, sectionType, format, hasLeadingZeros, contentType) => {\n      const queryValueNumber = Number(`${queryValue}`);\n      const sectionBoundaries = sectionsValueBoundaries[sectionType]({\n        currentDate: null,\n        format,\n        contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = Number(`${queryValue}0`) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(utils, queryValueNumber, sectionType, format, hasLeadingZeros, sectionBoundaries);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit') {\n        return getNewSectionValue(queryValue, activeSection.type, activeSection.format, activeSection.hasLeadingZeros, activeSection.contentType);\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const response = getNewSectionValue(queryValue, activeSection.type, 'MM', doesSectionHaveLeadingZeros(utils, 'digit', 'month', 'MM'), 'digit');\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue(queryValue, activeSection.type, activeSection.format, activeSection.hasLeadingZeros, activeSection.contentType);\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = getDaysInWeekStr(utils, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => !Number.isNaN(Number(queryValue)));\n  };\n  const applyCharacterEditing = useEventCallback(params => {\n    const activeSection = sections[params.sectionIndex];\n    const isNumericEditing = !Number.isNaN(Number(params.keyPressed));\n    const response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n    } else {\n      updateSectionValue({\n        activeSection,\n        newSectionValue: response.sectionValue,\n        shouldGoToNextSection: response.shouldGoToNextSection\n      });\n    }\n  });\n  return {\n    applyCharacterEditing,\n    resetCharacterQuery: resetQuery\n  };\n};","map":{"version":3,"names":["_extends","React","useEventCallback","useUtils","changeSectionValueFormat","cleanDigitSectionValue","doesSectionHaveLeadingZeros","getDateSectionConfigFromFormatToken","getDaysInWeekStr","getLetterEditingOptions","QUERY_LIFE_DURATION_MS","isQueryResponseWithoutValue","response","saveQuery","useFieldCharacterEditing","sections","updateSectionValue","sectionsValueBoundaries","setTempAndroidValueStr","utils","query","setQuery","useState","resetQuery","useEffect","_sections$query$secti","sectionIndex","type","sectionType","timeout","setTimeout","window","clearTimeout","applyQuery","getFirstSectionValueMatchingWithQuery","isValidQueryValue","keyPressed","cleanKeyPressed","toLowerCase","activeSection","value","concatenatedQueryValue","queryResponse","applyLetterEditing","params","findMatchingOptions","format","options","queryValue","matchingValues","filter","option","startsWith","length","sectionValue","shouldGoToNextSection","testQueryOnFormatAndFallbackFormat","fallbackFormat","formatFallbackValue","getOptions","contentType","fallbackOptions","fallbackValue","formats","month","indexOf","toString","weekday","applyNumericEditing","getNewSectionValue","hasLeadingZeros","queryValueNumber","Number","sectionBoundaries","currentDate","maximum","minimum","newSectionValue","formattedValue","isNaN","applyCharacterEditing","isNumericEditing","resetCharacterQuery"],"sources":["D:/SE/myreact/node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldCharacterEditing.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useUtils } from '../useUtils';\nimport { changeSectionValueFormat, cleanDigitSectionValue, doesSectionHaveLeadingZeros, getDateSectionConfigFromFormatToken, getDaysInWeekStr, getLetterEditingOptions } from './useField.utils';\nconst QUERY_LIFE_DURATION_MS = 5000;\nconst isQueryResponseWithoutValue = response => response.saveQuery != null;\n\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport const useFieldCharacterEditing = ({\n  sections,\n  updateSectionValue,\n  sectionsValueBoundaries,\n  setTempAndroidValueStr\n}) => {\n  const utils = useUtils();\n  const [query, setQuery] = React.useState(null);\n  const resetQuery = useEventCallback(() => setQuery(null));\n  React.useEffect(() => {\n    var _sections$query$secti;\n    if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {\n      resetQuery();\n    }\n  }, [sections, query, resetQuery]);\n  React.useEffect(() => {\n    if (query != null) {\n      const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);\n      return () => {\n        window.clearTimeout(timeout);\n      };\n    }\n    return () => {};\n  }, [query, resetQuery]);\n  const applyQuery = ({\n    keyPressed,\n    sectionIndex\n  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {\n    const cleanKeyPressed = keyPressed.toLowerCase();\n    const activeSection = sections[sectionIndex];\n\n    // The current query targets the section being editing\n    // We can try to concatenated value\n    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {\n      const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;\n      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);\n      if (!isQueryResponseWithoutValue(queryResponse)) {\n        setQuery({\n          sectionIndex,\n          value: concatenatedQueryValue,\n          sectionType: activeSection.type\n        });\n        return queryResponse;\n      }\n    }\n    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);\n    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {\n      resetQuery();\n      return null;\n    }\n    setQuery({\n      sectionIndex,\n      value: cleanKeyPressed,\n      sectionType: activeSection.type\n    });\n    if (isQueryResponseWithoutValue(queryResponse)) {\n      return null;\n    }\n    return queryResponse;\n  };\n  const applyLetterEditing = params => {\n    const findMatchingOptions = (format, options, queryValue) => {\n      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));\n      if (matchingValues.length === 0) {\n        return {\n          saveQuery: false\n        };\n      }\n      return {\n        sectionValue: matchingValues[0],\n        shouldGoToNextSection: matchingValues.length === 1\n      };\n    };\n    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {\n      const getOptions = format => getLetterEditingOptions(utils, activeSection.type, format);\n      if (activeSection.contentType === 'letter') {\n        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);\n      }\n\n      // When editing a digit-format month / weekDay and the user presses a letter,\n      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.\n      // We just have to make sure that the default month / weekDay format is a letter format,\n      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {\n        const fallbackOptions = getOptions(fallbackFormat);\n        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);\n        if (isQueryResponseWithoutValue(response)) {\n          return {\n            saveQuery: false\n          };\n        }\n        return _extends({}, response, {\n          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      switch (activeSection.type) {\n        case 'month':\n          {\n            const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);\n          }\n        case 'weekDay':\n          {\n            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);\n          }\n        case 'meridiem':\n          {\n            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);\n          }\n        default:\n          {\n            return {\n              saveQuery: false\n            };\n          }\n      }\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery);\n  };\n  const applyNumericEditing = params => {\n    const getNewSectionValue = (queryValue, sectionType, format, hasLeadingZeros, contentType) => {\n      const queryValueNumber = Number(`${queryValue}`);\n      const sectionBoundaries = sectionsValueBoundaries[sectionType]({\n        currentDate: null,\n        format,\n        contentType\n      });\n      if (queryValueNumber > sectionBoundaries.maximum) {\n        return {\n          saveQuery: false\n        };\n      }\n\n      // If the user types `0` on a month section,\n      // It is below the minimum, but we want to store the `0` in the query,\n      // So that when he pressed `1`, it will store `01` and move to the next section.\n      if (queryValueNumber < sectionBoundaries.minimum) {\n        return {\n          saveQuery: true\n        };\n      }\n      const shouldGoToNextSection = Number(`${queryValue}0`) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;\n      const newSectionValue = cleanDigitSectionValue(utils, queryValueNumber, sectionType, format, hasLeadingZeros, sectionBoundaries);\n      return {\n        sectionValue: newSectionValue,\n        shouldGoToNextSection\n      };\n    };\n    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {\n      if (activeSection.contentType === 'digit') {\n        return getNewSectionValue(queryValue, activeSection.type, activeSection.format, activeSection.hasLeadingZeros, activeSection.contentType);\n      }\n\n      // When editing a letter-format month and the user presses a digit,\n      // We can support the numeric editing by using the digit-format month and re-formatting the result.\n      if (activeSection.type === 'month') {\n        const response = getNewSectionValue(queryValue, activeSection.type, 'MM', doesSectionHaveLeadingZeros(utils, 'digit', 'month', 'MM'), 'digit');\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n\n      // When editing a letter-format weekDay and the user presses a digit,\n      // We can support the numeric editing by returning the nth day in the week day array.\n      if (activeSection.type === 'weekDay') {\n        const response = getNewSectionValue(queryValue, activeSection.type, activeSection.format, activeSection.hasLeadingZeros, activeSection.contentType);\n        if (isQueryResponseWithoutValue(response)) {\n          return response;\n        }\n        const formattedValue = getDaysInWeekStr(utils, activeSection.format)[Number(response.sectionValue) - 1];\n        return _extends({}, response, {\n          sectionValue: formattedValue\n        });\n      }\n      return {\n        saveQuery: false\n      };\n    };\n    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => !Number.isNaN(Number(queryValue)));\n  };\n  const applyCharacterEditing = useEventCallback(params => {\n    const activeSection = sections[params.sectionIndex];\n    const isNumericEditing = !Number.isNaN(Number(params.keyPressed));\n    const response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);\n    if (response == null) {\n      setTempAndroidValueStr(null);\n    } else {\n      updateSectionValue({\n        activeSection,\n        newSectionValue: response.sectionValue,\n        shouldGoToNextSection: response.shouldGoToNextSection\n      });\n    }\n  });\n  return {\n    applyCharacterEditing,\n    resetCharacterQuery: resetQuery\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}