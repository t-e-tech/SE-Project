{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useIsDateDisabled } from '../internals/hooks/validation/useDateValidation';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nimport { clamp } from '../internals/utils/date-utils';\nexport const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {\n  switch (action.type) {\n    case 'changeMonth':\n      return _extends({}, state, {\n        slideDirection: action.direction,\n        currentMonth: action.newMonth,\n        isMonthSwitchingAnimating: !reduceAnimations\n      });\n    case 'finishMonthSwitchingAnimation':\n      return _extends({}, state, {\n        isMonthSwitchingAnimating: false\n      });\n    case 'changeFocusedDay':\n      {\n        if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {\n          return state;\n        }\n        const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);\n        return _extends({}, state, {\n          focusedDay: action.focusedDay,\n          isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,\n          currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n          slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'\n        });\n      }\n    default:\n      throw new Error('missing support');\n  }\n};\nexport const useCalendarState = _ref2 => {\n  let {\n    value,\n    defaultCalendarMonth,\n    disableFuture,\n    disablePast,\n    disableSwitchToMonthOnDayFocus = false,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate\n  } = _ref2;\n  var _ref;\n  const now = useNow();\n  const utils = useUtils();\n  const reducerFn = React.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;\n  const [calendarState, dispatch] = React.useReducer(reducerFn, {\n    isMonthSwitchingAnimating: false,\n    focusedDay: value || now,\n    currentMonth: utils.startOfMonth((_ref = value != null ? value : defaultCalendarMonth) != null ? _ref : clamp(utils, now, minDate, maxDate)),\n    slideDirection: 'left'\n  });\n  const handleChangeMonth = React.useCallback(payload => {\n    dispatch(_extends({\n      type: 'changeMonth'\n    }, payload));\n    if (onMonthChange) {\n      onMonthChange(payload.newMonth);\n    }\n  }, [onMonthChange]);\n  const changeMonth = React.useCallback(newDate => {\n    const newDateRequested = newDate;\n    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n      return;\n    }\n    handleChangeMonth({\n      newMonth: utils.startOfMonth(newDateRequested),\n      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'\n    });\n  }, [calendarState.currentMonth, handleChangeMonth, utils]);\n  const isDateDisabled = useIsDateDisabled({\n    shouldDisableDate,\n    minDate,\n    maxDate,\n    disableFuture,\n    disablePast\n  });\n  const onMonthSwitchingAnimationEnd = React.useCallback(() => {\n    dispatch({\n      type: 'finishMonthSwitchingAnimation'\n    });\n  }, []);\n  const changeFocusedDay = useEventCallback((newFocusedDate, withoutMonthSwitchingAnimation) => {\n    if (!isDateDisabled(newFocusedDate)) {\n      dispatch({\n        type: 'changeFocusedDay',\n        focusedDay: newFocusedDate,\n        withoutMonthSwitchingAnimation\n      });\n    }\n  });\n  return {\n    calendarState,\n    changeMonth,\n    changeFocusedDay,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    handleChangeMonth\n  };\n};","map":{"version":3,"names":["_extends","React","useEventCallback","useIsDateDisabled","useUtils","useNow","clamp","createCalendarStateReducer","reduceAnimations","disableSwitchToMonthOnDayFocus","utils","state","action","type","slideDirection","direction","currentMonth","newMonth","isMonthSwitchingAnimating","focusedDay","isSameDay","needMonthSwitch","isSameMonth","withoutMonthSwitchingAnimation","startOfMonth","isAfterDay","Error","useCalendarState","value","defaultCalendarMonth","disableFuture","disablePast","maxDate","minDate","onMonthChange","shouldDisableDate","_ref","now","reducerFn","useRef","Boolean","current","calendarState","dispatch","useReducer","handleChangeMonth","useCallback","payload","changeMonth","newDate","newDateRequested","isDateDisabled","onMonthSwitchingAnimationEnd","changeFocusedDay","newFocusedDate"],"sources":["D:/SE/myreact/node_modules/@mui/x-date-pickers/DateCalendar/useCalendarState.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useIsDateDisabled } from '../internals/hooks/validation/useDateValidation';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nimport { clamp } from '../internals/utils/date-utils';\nexport const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {\n  switch (action.type) {\n    case 'changeMonth':\n      return _extends({}, state, {\n        slideDirection: action.direction,\n        currentMonth: action.newMonth,\n        isMonthSwitchingAnimating: !reduceAnimations\n      });\n    case 'finishMonthSwitchingAnimation':\n      return _extends({}, state, {\n        isMonthSwitchingAnimating: false\n      });\n    case 'changeFocusedDay':\n      {\n        if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {\n          return state;\n        }\n        const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);\n        return _extends({}, state, {\n          focusedDay: action.focusedDay,\n          isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,\n          currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n          slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'\n        });\n      }\n    default:\n      throw new Error('missing support');\n  }\n};\nexport const useCalendarState = ({\n  value,\n  defaultCalendarMonth,\n  disableFuture,\n  disablePast,\n  disableSwitchToMonthOnDayFocus = false,\n  maxDate,\n  minDate,\n  onMonthChange,\n  reduceAnimations,\n  shouldDisableDate\n}) => {\n  var _ref;\n  const now = useNow();\n  const utils = useUtils();\n  const reducerFn = React.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;\n  const [calendarState, dispatch] = React.useReducer(reducerFn, {\n    isMonthSwitchingAnimating: false,\n    focusedDay: value || now,\n    currentMonth: utils.startOfMonth((_ref = value != null ? value : defaultCalendarMonth) != null ? _ref : clamp(utils, now, minDate, maxDate)),\n    slideDirection: 'left'\n  });\n  const handleChangeMonth = React.useCallback(payload => {\n    dispatch(_extends({\n      type: 'changeMonth'\n    }, payload));\n    if (onMonthChange) {\n      onMonthChange(payload.newMonth);\n    }\n  }, [onMonthChange]);\n  const changeMonth = React.useCallback(newDate => {\n    const newDateRequested = newDate;\n    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n      return;\n    }\n    handleChangeMonth({\n      newMonth: utils.startOfMonth(newDateRequested),\n      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'\n    });\n  }, [calendarState.currentMonth, handleChangeMonth, utils]);\n  const isDateDisabled = useIsDateDisabled({\n    shouldDisableDate,\n    minDate,\n    maxDate,\n    disableFuture,\n    disablePast\n  });\n  const onMonthSwitchingAnimationEnd = React.useCallback(() => {\n    dispatch({\n      type: 'finishMonthSwitchingAnimation'\n    });\n  }, []);\n  const changeFocusedDay = useEventCallback((newFocusedDate, withoutMonthSwitchingAnimation) => {\n    if (!isDateDisabled(newFocusedDate)) {\n      dispatch({\n        type: 'changeFocusedDay',\n        focusedDay: newFocusedDate,\n        withoutMonthSwitchingAnimation\n      });\n    }\n  });\n  return {\n    calendarState,\n    changeMonth,\n    changeFocusedDay,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    handleChangeMonth\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}